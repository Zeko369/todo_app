generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

enum Role {
  USER
  ADMIN
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique
  password    String
  todos       Todo[]
  tasks       Task[]
  lists       List[]
  tags        Tag[]
  comments    Comment[]
  sharedLists List[]    @relation("sharedLists")
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  todo      Todo     @relation(fields: [todoId], references: [id])
  todoId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Type {
  NOTE
  TODO
  REMINDER
}

model Todo {
  id          Int       @id @default(autoincrement())
  pinned      Boolean   @default(false)
  title       String?
  description String?
  checked     Boolean   @default(false)
  checkedAt   DateTime?
  tasks       Task[]
  list        List?     @relation(fields: [listId], references: [id])
  listId      Int?
  comments    Comment[]
  type        Type      @default(TODO)
  requires    Todo[]    @relation("Requirements", references: [id])
  requiredBy  Todo[]    @relation("Requirements", references: [id])
  tags        Tag[]     @relation("Tags", references: [id])
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Task {
  id        Int       @id @default(autoincrement())
  // tasks        Task[]    @relation("TaskToTask")
  // parentTask   Task?     @relation("TaskToTask", fields: [parentTaskId], references: [id])
  // parentTaskId Int?
  todo      Todo      @relation(fields: [todoId], references: [id])
  todoId    Int
  title     String
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?
  checkedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model List {
  id         Int       @id @default(autoincrement())
  title      String?
  todos      Todo[]
  user       User?     @relation(fields: [userId], references: [id])
  sharedWith User[]    @relation("sharedLists")
  userId     Int?
  archivedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Tag {
  id        Int      @id @default(autoincrement())
  text      String
  color     String?
  todos     Todo[]   @relation("Tags", references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
